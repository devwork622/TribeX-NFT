{
  "address": "0xfcC2508eb3124678e99470A30cE2141B1F422b87",
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    { "inputs": [], "name": "ApprovalToCurrentOwner", "type": "error" },
    { "inputs": [], "name": "ApproveToCaller", "type": "error" },
    { "inputs": [], "name": "BalanceQueryForZeroAddress", "type": "error" },
    { "inputs": [], "name": "MintToZeroAddress", "type": "error" },
    { "inputs": [], "name": "MintZeroQuantity", "type": "error" },
    { "inputs": [], "name": "OwnerQueryForNonexistentToken", "type": "error" },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    { "inputs": [], "name": "TransferFromIncorrectOwner", "type": "error" },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    { "inputs": [], "name": "TransferToZeroAddress", "type": "error" },
    { "inputs": [], "name": "URIQueryForNonexistentToken", "type": "error" },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ClaimAirdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "live",
          "type": "bool"
        }
      ],
      "name": "FreeMintActive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_MAX_MINTS",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_OG_MAX_MINTS",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_WL_MAX_MINTS",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OGMerkleRoot",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OGprice",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OGsaleActive",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_MINT_PER_TX",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WLMerkleRoot",
      "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WLprice",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WLsaleActive",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "user", "type": "address" },
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "addAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "airdropList",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "quantity", "type": "uint256" },
        { "internalType": "address", "name": "_recipient", "type": "address" }
      ],
      "name": "airdropMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "owner", "type": "address" }
      ],
      "name": "balanceOf",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_new", "type": "uint256" }
      ],
      "name": "changeSupplyLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "getApproved",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "getOwnershipData",
      "outputs": [
        {
          "components": [
            { "internalType": "address", "name": "addr", "type": "address" },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            { "internalType": "bool", "name": "burned", "type": "bool" }
          ],
          "internalType": "struct ERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "owner", "type": "address" },
        { "internalType": "address", "name": "operator", "type": "address" }
      ],
      "name": "isApprovedForAll",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfMints",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfMints",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintOGSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfMints",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintWLSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "owner", "type": "address" }
      ],
      "name": "numberMinted",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "numberOfOGMintsOnAddress",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "numberOfWLMintsOnAddress",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "ownerOf",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "quantity", "type": "uint256" },
        { "internalType": "address", "name": "_recipient", "type": "address" }
      ],
      "name": "reserveMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "from", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "from", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" },
        { "internalType": "bytes", "name": "_data", "type": "bytes" }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleActive",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "operator", "type": "address" },
        { "internalType": "bool", "name": "approved", "type": "bool" }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "string", "name": "baseURI", "type": "string" }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_new", "type": "uint256" }
      ],
      "name": "setMaxAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_new", "type": "uint256" }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_new", "type": "uint256" }
      ],
      "name": "setOGMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setOGMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_new", "type": "uint256" }
      ],
      "name": "setOGprice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setOnlyOG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setOnlyPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setOnlyWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_new", "type": "uint256" }
      ],
      "name": "setPublicMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_new", "type": "uint256" }
      ],
      "name": "setWLMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setWLMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "_new", "type": "uint256" }
      ],
      "name": "setWLprice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }
      ],
      "name": "supportsInterface",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleAllsaleOn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleSaleOff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "_owner", "type": "address" }
      ],
      "name": "tokenIdOfOwner",
      "outputs": [
        { "internalType": "uint256[]", "name": "", "type": "uint256[]" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "tokenURI",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "totalClaimed",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "from", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "newOwner", "type": "address" }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e118a243eb7d0d4cc67ab143ff4971abc5786acff94c478cd4ccd72c513ae1c",
  "receipt": {
    "to": null,
    "from": "0xA225a0BDa21EcC6273221003393fD34bBa317e26",
    "contractAddress": "0x86ed1D6Fc39500071D6Fb7e3C89D81d705bA7700",
    "transactionIndex": 10,
    "gasUsed": "3552885",
    "logsBloom": "0x
    "blockHash": "0x2784ecf9a1b0ce2134edc857eb222ad3904b05a75b790fa8dceee90860ae9b87",
    "transactionHash": "0x2e118a243eb7d0d4cc67ab143ff4971abc5786acff94c478cd4ccd72c513ae1c",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 10315985,
        "transactionHash": "0x2e118a243eb7d0d4cc67ab143ff4971abc5786acff94c478cd4ccd72c513ae1c",
        "address": "0x86ed1D6Fc39500071D6Fb7e3C89D81d705bA7700",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a225a0bda21ecc6273221003393fd34bba317e26"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x2784ecf9a1b0ce2134edc857eb222ad3904b05a75b790fa8dceee90860ae9b87"
      }
    ],
    "blockNumber": 10315985,
    "cumulativeGasUsed": "5695357",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "594455e7ad23a1d7e70b85848f96e497",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintedQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ClaimAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"live\",\"type\":\"bool\"}],\"name\":\"FreeClaimActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_MAX_MINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_WL_MAX_MINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OGMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OGprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OGsaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_MINT_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WLMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WLprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WLsaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"changeSupplyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnershipData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFreeClaimActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintOGSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintWLSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numberOfWLMintsOnAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"reserveMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setFreeClaimRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setOGMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setProvenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWLMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleFreeClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleOGSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWLSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenIdOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"viewClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(uint256)\":{\"notice\":\"Public mint\"},\"mintOGSale(uint256,bytes32[])\":{\"notice\":\"OG mint\"},\"mintWLSale(uint256,bytes32[])\":{\"notice\":\"Whitelist mint\"},\"reserveMint(uint256)\":{\"notice\":\"Reserve mint for founders\"}},\"notice\":\".+------+     +------+     +------+     +------+     +------+. .' |    .'|    /|     /|     |      |     |\\\\     |\\\\    |`.    | `. +---+--+'  |   +-+----+ |     +------+     | +----+-+   |  `+--+---+ |   |  |   |   | |    | |     |      |     | |    | |   |   |  |   | |  ,+--+---+   | +----+-+     +------+     +-+----+ |   +---+--+   | |.'    | .'    |/     |/      |      |      \\\\|     \\\\|    `. |   `. | +------+'      +------+       +------+       +------+      `+------+ .----------------.  .----------------.  .----------------.  .----------------.  | .--------------. || .--------------. || .--------------. || .--------------. | | |     _____    | || | _____  _____ | || |    _______   | || |  _________   | | | |    |_   _|   | || ||_   _||_   _|| || |   /  ___  |  | || | |  _   _  |  | | | |      | |     | || |  | |    | |  | || |  |  (__ \\\\_|  | || | |_/ | | \\\\_|  | | | |   _  | |     | || |  | '    ' |  | || |   '.___`-.   | || |     | |      | | | |  | |_' |     | || |   \\\\ `--' /   | || |  |`\\\\____) |  | || |    _| |_     | | | |  `.___.'     | || |    `.__.'    | || |  |_______.'  | || |   |_____|    | | | |              | || |              | || |              | || |              | | | '--------------' || '--------------' || '--------------' || '--------------' | '----------------'  '----------------'  '----------------'  '----------------'  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. | | |     ______   | || | _____  _____ | || |   ______     | || |  _________   | || |    _______   | | | |   .' ___  |  | || ||_   _||_   _|| || |  |_   _ \\\\    | || | |_   ___  |  | || |   /  ___  |  | | | |  / .'   \\\\_|  | || |  | |    | |  | || |    | |_) |   | || |   | |_  \\\\_|  | || |  |  (__ \\\\_|  | | | |  | |         | || |  | '    ' |  | || |    |  __'.   | || |   |  _|  _   | || |   '.___`-.   | | | |  \\\\ `.___.'\\\\  | || |   \\\\ `--' /   | || |   _| |__) |  | || |  _| |___/ |  | || |  |`\\\\____) |  | | | |   `._____.'  | || |    `.__.'    | || |  |_______/   | || | |_________|  | || |  |_______.'  | | | |              | || |              | || |              | || |              | || |              | | | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' | '----------------'  '----------------'  '----------------'  '----------------'  '----------------' \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test.sol\":\"JustCubes\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\nerror ApprovalCallerNotOwnerNorApproved();\\r\\nerror ApprovalQueryForNonexistentToken();\\r\\nerror ApproveToCaller();\\r\\nerror ApprovalToCurrentOwner();\\r\\nerror BalanceQueryForZeroAddress();\\r\\nerror MintedQueryForZeroAddress();\\r\\nerror BurnedQueryForZeroAddress();\\r\\nerror AuxQueryForZeroAddress();\\r\\nerror MintToZeroAddress();\\r\\nerror MintZeroQuantity();\\r\\nerror OwnerIndexOutOfBounds();\\r\\nerror OwnerQueryForNonexistentToken();\\r\\nerror TokenIndexOutOfBounds();\\r\\nerror TransferCallerNotOwnerNorApproved();\\r\\nerror TransferFromIncorrectOwner();\\r\\nerror TransferToNonERC721ReceiverImplementer();\\r\\nerror TransferToZeroAddress();\\r\\nerror URIQueryForNonexistentToken();\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n *\\r\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Compiler will pack this into a single 256bit word.\\r\\n    struct TokenOwnership {\\r\\n        // The address of the owner.\\r\\n        address addr;\\r\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\r\\n        uint64 startTimestamp;\\r\\n        // Whether the token has been burned.\\r\\n        bool burned;\\r\\n    }\\r\\n\\r\\n    // Compiler will pack this into a single 256bit word.\\r\\n    struct AddressData {\\r\\n        // Realistically, 2**64-1 is more than enough.\\r\\n        uint64 balance;\\r\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\r\\n        uint64 numberMinted;\\r\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\r\\n        uint64 numberBurned;\\r\\n        // For miscellaneous variable(s) pertaining to the address\\r\\n        // (e.g. number of whitelist mint slots used).\\r\\n        // If there are multiple variables, please pack them into a uint64.\\r\\n        uint64 aux;\\r\\n    }\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint256 internal _currentIndex;\\r\\n\\r\\n    // The number of tokens burned.\\r\\n    uint256 internal _burnCounter;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to ownership details\\r\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\r\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\r\\n\\r\\n    // Mapping owner address to address data\\r\\n    mapping(address => AddressData) private _addressData;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _currentIndex = _startTokenId();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * To change the starting tokenId, please override this function.\\r\\n     */\\r\\n    function _startTokenId() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\r\\n        // more than _currentIndex - _startTokenId() times\\r\\n        unchecked {\\r\\n            return _currentIndex - _burnCounter - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the total amount of tokens minted in the contract.\\r\\n     */\\r\\n    function _totalMinted() internal view returns (uint256) {\\r\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\r\\n        // and it is initialized to _startTokenId()\\r\\n        unchecked {\\r\\n            return _currentIndex - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC165, IERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view override returns (uint256) {\\r\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\r\\n        return uint256(_addressData[owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens minted by `owner`.\\r\\n     */\\r\\n    function _numberMinted(address owner) internal view returns (uint256) {\\r\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\r\\n        return uint256(_addressData[owner].numberMinted);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\r\\n     */\\r\\n    function _numberBurned(address owner) internal view returns (uint256) {\\r\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\r\\n        return uint256(_addressData[owner].numberBurned);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     */\\r\\n    function _getAux(address owner) internal view returns (uint64) {\\r\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\r\\n        return _addressData[owner].aux;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     * If there are multiple variables, please pack them into a uint64.\\r\\n     */\\r\\n    function _setAux(address owner, uint64 aux) internal {\\r\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\r\\n        _addressData[owner].aux = aux;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\r\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\r\\n     */\\r\\n    function ownershipOf(uint256 tokenId)\\r\\n        internal\\r\\n        view\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        uint256 curr = tokenId;\\r\\n\\r\\n        unchecked {\\r\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\r\\n                TokenOwnership memory ownership = _ownerships[curr];\\r\\n                if (!ownership.burned) {\\r\\n                    if (ownership.addr != address(0)) {\\r\\n                        return ownership;\\r\\n                    }\\r\\n                    // Invariant:\\r\\n                    // There will always be an ownership that has an address and is not burned\\r\\n                    // before an ownership that does not have an address and is not burned.\\r\\n                    // Hence, curr will not underflow.\\r\\n                    while (true) {\\r\\n                        curr--;\\r\\n                        ownership = _ownerships[curr];\\r\\n                        if (ownership.addr != address(0)) {\\r\\n                            return ownership;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        revert OwnerQueryForNonexistentToken();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n        return ownershipOf(tokenId).addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return\\r\\n            bytes(baseURI).length != 0\\r\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public override {\\r\\n        address owner = ERC721A.ownerOf(tokenId);\\r\\n        if (to == owner) revert ApprovalToCurrentOwner();\\r\\n\\r\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\r\\n            revert ApprovalCallerNotOwnerNorApproved();\\r\\n        }\\r\\n\\r\\n        _approve(to, tokenId, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        if (operator == _msgSender()) revert ApproveToCaller();\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        _transfer(from, to, tokenId);\\r\\n        if (\\r\\n            to.isContract() &&\\r\\n            !_checkContractOnERC721Received(from, to, tokenId, _data)\\r\\n        ) {\\r\\n            revert TransferToNonERC721ReceiverImplementer();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return\\r\\n            _startTokenId() <= tokenId &&\\r\\n            tokenId < _currentIndex &&\\r\\n            !_ownerships[tokenId].burned;\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 quantity) internal {\\r\\n        _safeMint(to, quantity, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        _mint(to, quantity, _data, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data,\\r\\n        bool safe\\r\\n    ) internal {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\r\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\r\\n        unchecked {\\r\\n            _addressData[to].balance += uint64(quantity);\\r\\n            _addressData[to].numberMinted += uint64(quantity);\\r\\n\\r\\n            _ownerships[startTokenId].addr = to;\\r\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\r\\n\\r\\n            uint256 updatedIndex = startTokenId;\\r\\n            uint256 end = updatedIndex + quantity;\\r\\n\\r\\n            if (safe && to.isContract()) {\\r\\n                do {\\r\\n                    emit Transfer(address(0), to, updatedIndex);\\r\\n                    if (\\r\\n                        !_checkContractOnERC721Received(\\r\\n                            address(0),\\r\\n                            to,\\r\\n                            updatedIndex++,\\r\\n                            _data\\r\\n                        )\\r\\n                    ) {\\r\\n                        revert TransferToNonERC721ReceiverImplementer();\\r\\n                    }\\r\\n                } while (updatedIndex != end);\\r\\n                // Reentrancy protection\\r\\n                if (_currentIndex != startTokenId) revert();\\r\\n            } else {\\r\\n                do {\\r\\n                    emit Transfer(address(0), to, updatedIndex++);\\r\\n                } while (updatedIndex != end);\\r\\n            }\\r\\n            _currentIndex = updatedIndex;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) private {\\r\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\r\\n\\r\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\r\\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\\r\\n            getApproved(tokenId) == _msgSender());\\r\\n\\r\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\r\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\r\\n        if (to == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId, prevOwnership.addr);\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            _addressData[from].balance -= 1;\\r\\n            _addressData[to].balance += 1;\\r\\n\\r\\n            _ownerships[tokenId].addr = to;\\r\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\r\\n\\r\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n            uint256 nextTokenId = tokenId + 1;\\r\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\r\\n                // This will suffice for checking _exists(nextTokenId),\\r\\n                // as a burned slot cannot contain the zero address.\\r\\n                if (nextTokenId < _currentIndex) {\\r\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\r\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership\\r\\n                        .startTimestamp;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId, prevOwnership.addr);\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            _addressData[prevOwnership.addr].balance -= 1;\\r\\n            _addressData[prevOwnership.addr].numberBurned += 1;\\r\\n\\r\\n            // Keep track of who burned the token, and the timestamp of burning.\\r\\n            _ownerships[tokenId].addr = prevOwnership.addr;\\r\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\r\\n            _ownerships[tokenId].burned = true;\\r\\n\\r\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\r\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n            uint256 nextTokenId = tokenId + 1;\\r\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\r\\n                // This will suffice for checking _exists(nextTokenId),\\r\\n                // as a burned slot cannot contain the zero address.\\r\\n                if (nextTokenId < _currentIndex) {\\r\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\r\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership\\r\\n                        .startTimestamp;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\r\\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\r\\n\\r\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\r\\n        unchecked {\\r\\n            _burnCounter++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        address owner\\r\\n    ) private {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkContractOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        try\\r\\n            IERC721Receiver(to).onERC721Received(\\r\\n                _msgSender(),\\r\\n                from,\\r\\n                tokenId,\\r\\n                _data\\r\\n            )\\r\\n        returns (bytes4 retval) {\\r\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n        } catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            } else {\\r\\n                assembly {\\r\\n                    revert(add(32, reason), mload(reason))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n     * And also called before burning one token.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n     * minting.\\r\\n     * And also called after one token has been burned.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x5c111dd61e9b7cf4167ae787e59c4b90c5f22252d97a68958bbbad61dd777a45\",\"license\":\"MIT\"},\"contracts/test.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./ERC721A.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n\\r\\n                   .+------+     +------+     +------+     +------+     +------+.\\r\\n                 .' |    .'|    /|     /|     |      |     |\\\\     |\\\\    |`.    | `.\\r\\n                +---+--+'  |   +-+----+ |     +------+     | +----+-+   |  `+--+---+\\r\\n                |   |  |   |   | |    | |     |      |     | |    | |   |   |  |   |\\r\\n                |  ,+--+---+   | +----+-+     +------+     +-+----+ |   +---+--+   |\\r\\n                |.'    | .'    |/     |/      |      |      \\\\|     \\\\|    `. |   `. |\\r\\n                +------+'      +------+       +------+       +------+      `+------+\\r\\n\\r\\n          .----------------.  .----------------.  .----------------.  .----------------. \\r\\n         | .--------------. || .--------------. || .--------------. || .--------------. |\\r\\n         | |     _____    | || | _____  _____ | || |    _______   | || |  _________   | |\\r\\n         | |    |_   _|   | || ||_   _||_   _|| || |   /  ___  |  | || | |  _   _  |  | |\\r\\n         | |      | |     | || |  | |    | |  | || |  |  (__ \\\\_|  | || | |_/ | | \\\\_|  | |\\r\\n         | |   _  | |     | || |  | '    ' |  | || |   '.___`-.   | || |     | |      | |\\r\\n         | |  | |_' |     | || |   \\\\ `--' /   | || |  |`\\\\____) |  | || |    _| |_     | |\\r\\n         | |  `.___.'     | || |    `.__.'    | || |  |_______.'  | || |   |_____|    | |\\r\\n         | |              | || |              | || |              | || |              | |\\r\\n         | '--------------' || '--------------' || '--------------' || '--------------' |\\r\\n         '----------------'  '----------------'  '----------------'  '----------------' \\r\\n\\r\\n .----------------.  .----------------.  .----------------.  .----------------.  .----------------. \\r\\n| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\\r\\n| |     ______   | || | _____  _____ | || |   ______     | || |  _________   | || |    _______   | |\\r\\n| |   .' ___  |  | || ||_   _||_   _|| || |  |_   _ \\\\    | || | |_   ___  |  | || |   /  ___  |  | |\\r\\n| |  / .'   \\\\_|  | || |  | |    | |  | || |    | |_) |   | || |   | |_  \\\\_|  | || |  |  (__ \\\\_|  | |\\r\\n| |  | |         | || |  | '    ' |  | || |    |  __'.   | || |   |  _|  _   | || |   '.___`-.   | |\\r\\n| |  \\\\ `.___.'\\\\  | || |   \\\\ `--' /   | || |   _| |__) |  | || |  _| |___/ |  | || |  |`\\\\____) |  | |\\r\\n| |   `._____.'  | || |    `.__.'    | || |  |_______/   | || | |_________|  | || |  |_______.'  | |\\r\\n| |              | || |              | || |              | || |              | || |              | |\\r\\n| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\\r\\n '----------------'  '----------------'  '----------------'  '----------------'  '----------------' \\r\\n\\r\\n\\r\\n */\\r\\n\\r\\ncontract JustCubes is ERC721A, Ownable, ReentrancyGuard {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    mapping(address => uint256) public numberOfWLMintsOnAddress;\\r\\n    mapping(address => uint256) public totalClaimed;\\r\\n    mapping(address => uint256) public airdropList;\\r\\n\\r\\n    //Sale flags\\r\\n    bool public OGsaleActive = false;\\r\\n    bool public WLsaleActive = false;\\r\\n    bool public saleActive = true;\\r\\n    bool public isFreeClaimActive = false;\\r\\n\\r\\n    //Mint limits\\r\\n    uint256 public immutable ADDRESS_MAX_MINTS = 5;\\r\\n    uint256 public immutable ADDRESS_WL_MAX_MINTS = 2;\\r\\n    uint256 public immutable PUBLIC_MINT_PER_TX = 2;\\r\\n\\r\\n    //Supply\\r\\n    uint256 public maxSupply = 8888;\\r\\n    uint256 public reservedSupply = 200;\\r\\n\\r\\n    //Pricing\\r\\n    uint256 public OGprice = 0.045 ether;\\r\\n    uint256 public WLprice = 0.085 ether;\\r\\n    uint256 public price = 0.09 ether;\\r\\n\\r\\n    // Sign Hash\\r\\n    address private _signer = 0xdeadc0DEDADd13535dC04A830FD313E40385B765;\\r\\n\\r\\n    //Pre-reveal IPFS link\\r\\n    string private _baseTokenURI = \\\"\\\";\\r\\n\\r\\n    //Merkle roots\\r\\n    bytes32 public OGMerkleRoot;\\r\\n    bytes32 public WLMerkleRoot;\\r\\n    bytes32 private freeClaim;\\r\\n\\r\\n    //Payable addresses\\r\\n    address private constant AL_ADDRESS =\\r\\n        0x4Ee72eab8321Fb265Fd9fE6eeFee14D0a1A1906C;\\r\\n    address private constant CR_ADDRESS =\\r\\n        0x022c875cda743a687a2669f5515408D7bC6aF755;\\r\\n    address private constant AD_ADDRESS =\\r\\n        0xa3712A3C873E06026cbCBE14727Bf6010F671738;\\r\\n    address private constant PROJ_ADDRESS =\\r\\n        0x11b2E4Ea2e759da33fB6F35bD4031F6E40046D26;\\r\\n    address private constant AA_ADDRESS =\\r\\n        0x5f208bD3AD1e6F67bd68833e04efc8263A51b467;\\r\\n    address private constant DEV_ADDRESS =\\r\\n        0xcEB5E5c55bB585CFaEF92aeB1609C4384Ec1890e;\\r\\n    address private constant SKIN_ADDRESS =\\r\\n        0xAc839AaE0afc40131fCCaA1FCe5C53e6b13AbA8B;\\r\\n    address private constant MA_ADDRESS =\\r\\n        0x29AE4c46dAE9cb298A2398AAb348769426900903;\\r\\n    address private constant LE_ADDRESS =\\r\\n        0x30e37464499Deb7681030eCcB33793E33e833402;\\r\\n    address private constant KY_ADDRESS =\\r\\n        0x927705920d0E697559718A16E283C458E75975f4;\\r\\n    address private constant BR_ADDRESS =\\r\\n        0x5D8906c28a43bD2E99680b7552963d196602bE84;\\r\\n    address private constant RY_ADDRESS =\\r\\n        0x55E29AdA6fA377D75cAAB61e391aa5FC188960b2;\\r\\n    address private constant ZA_ADDRESS =\\r\\n        0x2b878dcb33490FE671ADf704c6388aBB569F4E18;\\r\\n    address private constant ML_ADDRESS =\\r\\n        0xFD43A900AC4380Fd7e39775602B5EE2F341F8Dfe;\\r\\n\\r\\n    event Claimed(uint256 count, address sender);\\r\\n    event FreeClaimActive(bool live);\\r\\n    event ClaimAirdrop(uint256 count, address sender);\\r\\n    event Airdrop(uint256 count, address sender);\\r\\n\\r\\n    constructor() ERC721A(\\\"JustCubes\\\", \\\"CUBE\\\") {}\\r\\n\\r\\n    modifier callerIsUser() {\\r\\n        require(tx.origin == msg.sender, \\\"The caller is another contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlySignedTx(uint256 quantity_, bytes calldata signature_) {\\r\\n        require(\\r\\n            keccak256(abi.encodePacked(msg.sender, quantity_))\\r\\n                .toEthSignedMessageHash()\\r\\n                .recover(signature_) == _signer,\\r\\n            \\\"Signature does not correspond\\\"\\r\\n        );\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * OG mint\\r\\n     */\\r\\n    function mintOGSale(uint256 numberOfMints, bytes32[] calldata _merkleProof)\\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        require(OGsaleActive, \\\"Presale must be active to mint\\\");\\r\\n\\r\\n        require(\\r\\n            MerkleProof.verify(\\r\\n                _merkleProof,\\r\\n                OGMerkleRoot,\\r\\n                keccak256(abi.encodePacked(msg.sender))\\r\\n            ),\\r\\n            \\\"Invalid proof - Caller not whitelisted\\\"\\r\\n        );\\r\\n\\r\\n        require(numberOfMints > 0, \\\"Sender is trying to mint none\\\");\\r\\n        require(\\r\\n            numberMinted(msg.sender) + numberOfMints <= ADDRESS_MAX_MINTS,\\r\\n            \\\"Sender is trying to mint more than allocated tokens\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberOfWLMintsOnAddress[msg.sender] + numberOfMints <=\\r\\n                ADDRESS_WL_MAX_MINTS,\\r\\n            \\\"Sender is trying to mint more than their whitelist amount\\\"\\r\\n        );\\r\\n        require(\\r\\n            totalSupply() + numberOfMints <= maxSupply,\\r\\n            \\\"This would exceed the max number of mints\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value >= numberOfMints * OGprice,\\r\\n            \\\"Not enough ether to mint\\\"\\r\\n        );\\r\\n\\r\\n        numberOfWLMintsOnAddress[msg.sender] += numberOfMints;\\r\\n        _safeMint(msg.sender, numberOfMints);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Whitelist mint\\r\\n     */\\r\\n    function mintWLSale(uint256 numberOfMints, bytes32[] calldata _merkleProof)\\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        require(WLsaleActive, \\\"Sale must be active to mint\\\");\\r\\n\\r\\n        require(\\r\\n            MerkleProof.verify(\\r\\n                _merkleProof,\\r\\n                WLMerkleRoot,\\r\\n                keccak256(abi.encodePacked(msg.sender))\\r\\n            ),\\r\\n            \\\"Invalid proof - Caller not whitelisted\\\"\\r\\n        );\\r\\n\\r\\n        require(numberOfMints > 0, \\\"Sender is trying to mint none\\\");\\r\\n        require(\\r\\n            numberMinted(msg.sender) + numberOfMints <= ADDRESS_MAX_MINTS,\\r\\n            \\\"Sender is trying to mint more than allocated tokens\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberOfWLMintsOnAddress[msg.sender] + numberOfMints <=\\r\\n                ADDRESS_WL_MAX_MINTS,\\r\\n            \\\"Sender is trying to mint more than their whitelist amount\\\"\\r\\n        );\\r\\n        require(\\r\\n            totalSupply() + numberOfMints <= maxSupply,\\r\\n            \\\"Mint would exceed max supply of mints\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value >= numberOfMints * WLprice,\\r\\n            \\\"Amount of ether is not enough\\\"\\r\\n        );\\r\\n\\r\\n        numberOfWLMintsOnAddress[msg.sender] += numberOfMints;\\r\\n        _safeMint(msg.sender, numberOfMints);\\r\\n    }\\r\\n\\r\\n    function claim(uint256 count, bytes32[] calldata proof)\\r\\n        external\\r\\n        payable\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(isFreeClaimActive, \\\"Not Live\\\");\\r\\n        require(_claimVerify(_claimLeaf(msg.sender, count), proof), \\\"Invalid\\\");\\r\\n        require(totalClaimed[msg.sender] != count, \\\"Already claimed\\\");\\r\\n\\r\\n        uint256 current = totalSupply();\\r\\n        require(current + count <= maxSupply, \\\"Sold out\\\");\\r\\n        _safeMint(msg.sender, count);\\r\\n        totalClaimed[msg.sender] += count;\\r\\n        emit Claimed(count, msg.sender);\\r\\n    }\\r\\n\\r\\n    function viewClaimed(address account) external view returns (uint256) {\\r\\n        return totalClaimed[account];\\r\\n    }\\r\\n\\r\\n    function toggleFreeClaim() external onlyOwner {\\r\\n        isFreeClaimActive = !isFreeClaimActive;\\r\\n        emit FreeClaimActive(isFreeClaimActive);\\r\\n    }\\r\\n\\r\\n    function _claimLeaf(address account, uint256 count)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return keccak256(abi.encodePacked(count, account));\\r\\n    }\\r\\n\\r\\n    function _claimVerify(bytes32 leaf, bytes32[] memory proof)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return MerkleProof.verify(proof, freeClaim, leaf);\\r\\n    }\\r\\n\\r\\n    function setFreeClaimRoot(bytes32 _root) external onlyOwner {\\r\\n        freeClaim = _root;\\r\\n    }\\r\\n\\r\\n    function claimAirdrop(uint256 count) external payable nonReentrant {\\r\\n        require(airdropList[msg.sender] >= count, \\\"Exceeds airdrop amount\\\");\\r\\n\\r\\n        uint256 current = totalSupply();\\r\\n        require(current + count <= maxSupply, \\\"Sold out\\\");\\r\\n        airdropList[msg.sender] -= count;\\r\\n        _safeMint(msg.sender, count);\\r\\n        emit ClaimAirdrop(count, msg.sender);\\r\\n    }\\r\\n\\r\\n    function addAirdrop(address user, uint256 amount) external onlyOwner {\\r\\n        airdropList[user] += amount;\\r\\n        emit Airdrop(amount, user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Public mint\\r\\n     */\\r\\n    function mint(uint256 numberOfMints) external payable callerIsUser {\\r\\n        require(saleActive, \\\"Sale must be active to mint\\\");\\r\\n        require(numberOfMints > 0, \\\"Sender is trying to mint none\\\");\\r\\n        require(\\r\\n            numberOfMints <= PUBLIC_MINT_PER_TX,\\r\\n            \\\"Sender is trying to mint too many in a single transaction\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberMinted(msg.sender) + numberOfMints <= ADDRESS_MAX_MINTS,\\r\\n            \\\"Sender is trying to mint more than allocated tokens\\\"\\r\\n        );\\r\\n        require(\\r\\n            totalSupply() + numberOfMints <= maxSupply,\\r\\n            \\\"Mint would exceed max supply of mints\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value >= numberOfMints * price,\\r\\n            \\\"Amount of ether is not enough\\\"\\r\\n        );\\r\\n\\r\\n        _safeMint(msg.sender, numberOfMints);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Reserve mint for founders\\r\\n     */\\r\\n    function reserveMint(uint256 quantity) external onlyOwner {\\r\\n        require(\\r\\n            totalSupply() + quantity <= reservedSupply,\\r\\n            \\\"Too many minted to public to perform dev mint\\\"\\r\\n        );\\r\\n        require(\\r\\n            quantity % ADDRESS_MAX_MINTS == 0,\\r\\n            \\\"Must only mint a multiple of the maximum address mints\\\"\\r\\n        );\\r\\n\\r\\n        uint256 numChunks = quantity / ADDRESS_MAX_MINTS;\\r\\n\\r\\n        for (uint256 i = 0; i < numChunks; i++) {\\r\\n            _safeMint(msg.sender, ADDRESS_MAX_MINTS);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function toggleOGSale() external onlyOwner {\\r\\n        OGsaleActive = !OGsaleActive;\\r\\n    }\\r\\n\\r\\n    function toggleWLSale() external onlyOwner {\\r\\n        WLsaleActive = !WLsaleActive;\\r\\n    }\\r\\n\\r\\n    function toggleSale() external onlyOwner {\\r\\n        saleActive = !saleActive;\\r\\n    }\\r\\n\\r\\n    function setPrice(uint256 newPrice) external onlyOwner {\\r\\n        price = newPrice;\\r\\n    }\\r\\n\\r\\n    function setOGMerkleRoot(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        OGMerkleRoot = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function setWLMerkleRoot(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        WLMerkleRoot = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function setSupply(uint256 newSupply) external onlyOwner {\\r\\n        require(newSupply < maxSupply, \\\"Cannot increase supply of tokens\\\");\\r\\n        maxSupply = newSupply;\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner nonReentrant {\\r\\n        require(address(this).balance > 0, \\\"No balance to withdraw\\\");\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n\\r\\n        _withdraw(AL_ADDRESS, (contractBalance * 19) / 100);\\r\\n        _withdraw(CR_ADDRESS, (contractBalance * 19) / 100);\\r\\n        _withdraw(AD_ADDRESS, (contractBalance * 19) / 100);\\r\\n        _withdraw(PROJ_ADDRESS, (contractBalance * 20) / 100);\\r\\n        _withdraw(AA_ADDRESS, (contractBalance * 5) / 100);\\r\\n        _withdraw(DEV_ADDRESS, (contractBalance * 9) / 100);\\r\\n        _withdraw(SKIN_ADDRESS, (contractBalance * 3) / 100);\\r\\n        _withdraw(MA_ADDRESS, (contractBalance * 1) / 100);\\r\\n        _withdraw(LE_ADDRESS, (contractBalance * 1) / 100);\\r\\n        _withdraw(KY_ADDRESS, (contractBalance * 5) / 1000);\\r\\n        _withdraw(BR_ADDRESS, (contractBalance * 5) / 1000);\\r\\n        _withdraw(RY_ADDRESS, (contractBalance * 1) / 100);\\r\\n        _withdraw(ZA_ADDRESS, (contractBalance * 1) / 100);\\r\\n        _withdraw(ML_ADDRESS, (contractBalance * 1) / 100);\\r\\n    }\\r\\n\\r\\n    function _withdraw(address _address, uint256 _amount) private {\\r\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata baseURI) external onlyOwner {\\r\\n        _baseTokenURI = baseURI;\\r\\n    }\\r\\n\\r\\n    function numberMinted(address owner) public view returns (uint256) {\\r\\n        return _numberMinted(owner);\\r\\n    }\\r\\n\\r\\n    function tokenIdOfOwner(address _owner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 tokenCount = totalSupply();\\r\\n\\r\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\r\\n        uint256 arrayIndex;\\r\\n        for (uint256 i; i < tokenCount; i++) {\\r\\n            TokenOwnership memory owner = ownershipOf(i);\\r\\n            if (owner.addr == _owner) {\\r\\n                tokensId[arrayIndex] = i;\\r\\n                arrayIndex++;\\r\\n            }\\r\\n        }\\r\\n        return tokensId;\\r\\n    }\\r\\n\\r\\n    function getOwnershipData(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return ownershipOf(tokenId);\\r\\n    }\\r\\n\\r\\n    function setProvenance(address _new) external onlyOwner {\\r\\n        _signer = _new;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function changeSupplyLimit(uint256 _new) external onlyOwner {\\r\\n        maxSupply = _new;\\r\\n    }\\r\\n\\r\\n    function setMintPrice(uint256 _new) external onlyOwner {\\r\\n        price = _new;\\r\\n    }\\r\\n\\r\\n    function _verifyWhitelist(address _user, bytes32[] calldata _merkleProof)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(_user));\\r\\n        return MerkleProof.verify(_merkleProof, WLMerkleRoot, leaf);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb986af9d7391d448856d4249c3b9ce31c794b0757caf4bf6fa38698c962ba05f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600d805463ffffffff1916620100001790556005608052600260a081905260c0526122b8600e5560c8600f55669fdf42f6e4800060105567012dfb0cb5e8800060115567013fbe85edc90000601255601380546001600160a01b03191673deadc0dedadd13535dc04a830fd313e40385b7651790556101006040819052600060e0819052620000919160149162000172565b503480156200009f57600080fd5b5060408051808201825260098152684a757374437562657360b81b6020808301918252835180850190945260048452634355424560e01b908401528151919291620000ed9160029162000172565b5080516200010390600390602084019062000172565b50506000805550620001153362000120565b600160095562000255565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001809062000218565b90600052602060002090601f016020900481019282620001a45760008555620001ef565b82601f10620001bf57805160ff1916838001178555620001ef565b82800160010185558215620001ef579182015b82811115620001ef578251825591602001919060010190620001d2565b50620001fd92915062000201565b5090565b5b80821115620001fd576000815560010162000202565b600181811c908216806200022d57607f821691505b602082108114156200024f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051613aae620002c4600039600081816106740152611d390152600081816104f50152818161179e01526121ef0152600081816104c101528181610db601528181610e5501528181610e8d015281816116ef01528181611dcf01526121400152613aae6000f3fe6080604052600436106103975760003560e01c80638da5cb5b116101dc578063cd5d4a9011610102578063e30d4440116100a0578063ef5d9ae81161006f578063ef5d9ae814610ac1578063f2fde38b14610aee578063f4a0a528146107aa578063fa53cd3814610b0e57600080fd5b8063e30d444014610a2f578063e397950814610a42578063e985e9c514610a58578063ee46699614610aa157600080fd5b8063d5abeb01116100dc578063d5abeb01146109b7578063da87741b146109cd578063db2e21bc146109fa578063dc33e68114610a0f57600080fd5b8063cd5d4a901461096d578063d44e357314610982578063d57f8279146109a257600080fd5b8063a22cb4651161017a578063b88d4fde11610149578063b88d4fde146108dd578063c4fc4246146108fd578063c556da8e14610917578063c87b56dd1461094d57600080fd5b8063a22cb46514610874578063a3a53ccb14610894578063ae269743146108a7578063aea48328146108c757600080fd5b806395d89b41116101b657806395d89b41146108215780639980018514610836578063a035b1fe1461084b578063a0712d681461086157600080fd5b80638da5cb5b1461078c57806391b7f5ed146107aa5780639231ab2a146107ca57600080fd5b806343d0d356116102c157806363665f2e1161025f5780637d44fd111161022e5780637d44fd111461072b5780637d8966e41461074b57806383df8d8d146107605780638babe7661461077657600080fd5b806363665f2e146106b657806368428a1b146106d657806370a08231146106f6578063715018a61461071657600080fd5b806358cf77fa1161029b57806358cf77fa146106225780635d579a091461064f57806363055127146106625780636352211e1461069657600080fd5b806343d0d356146105bf57806344d19d2b146105ec57806355f804b31461060257600080fd5b806318f34b0f116103395780632f52ebb7116103085780632f52ebb7146105575780633b4c4b251461056a5780633ccfd60b1461058a57806342842e0e1461059f57600080fd5b806318f34b0f146104af578063207e2173146104e357806323b872dd1461051757806325c2c0201461053757600080fd5b8063095ea7b311610375578063095ea7b31461042b5780631342ff4c1461044d578063142109ed1461046d57806318160ddd1461048c57600080fd5b806301ffc9a71461039c57806306fdde03146103d1578063081812fc146103f3575b600080fd5b3480156103a857600080fd5b506103bc6103b73660046136fb565b610b2f565b60405190151581526020015b60405180910390f35b3480156103dd57600080fd5b506103e6610b81565b6040516103c891906138f5565b3480156103ff57600080fd5b5061041361040e3660046136e3565b610c13565b6040516001600160a01b0390911681526020016103c8565b34801561043757600080fd5b5061044b6104463660046136ba565b610c57565b005b34801561045957600080fd5b5061044b6104683660046136e3565b610ce5565b34801561047957600080fd5b50600d546103bc90610100900460ff1681565b34801561049857600080fd5b50600154600054035b6040519081526020016103c8565b3480156104bb57600080fd5b506104a17f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ef57600080fd5b506104a17f000000000000000000000000000000000000000000000000000000000000000081565b34801561052357600080fd5b5061044b610532366004613570565b610ec3565b34801561054357600080fd5b5061044b6105523660046136e3565b610ece565b61044b6105653660046137a0565b610f1b565b34801561057657600080fd5b5061044b6105853660046136e3565b61115b565b34801561059657600080fd5b5061044b6111f9565b3480156105ab57600080fd5b5061044b6105ba366004613570565b611506565b3480156105cb57600080fd5b506104a16105da366004613524565b600a6020526000908152604090205481565b3480156105f857600080fd5b506104a1600f5481565b34801561060e57600080fd5b5061044b61061d366004613733565b611521565b34801561062e57600080fd5b506104a161063d366004613524565b600c6020526000908152604090205481565b61044b61065d3660046137a0565b611575565b34801561066e57600080fd5b506104a17f000000000000000000000000000000000000000000000000000000000000000081565b3480156106a257600080fd5b506104136106b13660046136e3565b61193f565b3480156106c257600080fd5b5061044b6106d13660046136ba565b611951565b3480156106e257600080fd5b50600d546103bc9062010000900460ff1681565b34801561070257600080fd5b506104a1610711366004613524565b611a0b565b34801561072257600080fd5b5061044b611a5a565b34801561073757600080fd5b5061044b6107463660046136e3565b611aae565b34801561075757600080fd5b5061044b611afb565b34801561076c57600080fd5b506104a160155481565b34801561078257600080fd5b506104a160105481565b34801561079857600080fd5b506008546001600160a01b0316610413565b3480156107b657600080fd5b5061044b6107c53660046136e3565b611b62565b3480156107d657600080fd5b506107ea6107e53660046136e3565b611baf565b6040805182516001600160a01b0316815260208084015167ffffffffffffffff1690820152918101511515908201526060016103c8565b34801561082d57600080fd5b506103e6611bd5565b34801561084257600080fd5b5061044b611be4565b34801561085757600080fd5b506104a160125481565b61044b61086f3660046136e3565b611c40565b34801561088057600080fd5b5061044b61088f366004613680565b611f4c565b61044b6108a23660046137a0565b611fe2565b3480156108b357600080fd5b5061044b6108c23660046136e3565b612365565b3480156108d357600080fd5b506104a160165481565b3480156108e957600080fd5b5061044b6108f83660046135ab565b6123b2565b34801561090957600080fd5b50600d546103bc9060ff1681565b34801561092357600080fd5b506104a1610932366004613524565b6001600160a01b03166000908152600b602052604090205490565b34801561095957600080fd5b506103e66109683660046136e3565b612403565b34801561097957600080fd5b5061044b612488565b34801561098e57600080fd5b5061044b61099d3660046136e3565b612536565b3480156109ae57600080fd5b5061044b61257e565b3480156109c357600080fd5b506104a1600e5481565b3480156109d957600080fd5b506109ed6109e8366004613524565b6125e3565b6040516103c891906138b1565b348015610a0657600080fd5b5061044b6126d9565b348015610a1b57600080fd5b506104a1610a2a366004613524565b61275a565b61044b610a3d3660046136e3565b612765565b348015610a4e57600080fd5b506104a160115481565b348015610a6457600080fd5b506103bc610a7336600461353e565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b348015610aad57600080fd5b5061044b610abc366004613524565b6128e4565b348015610acd57600080fd5b506104a1610adc366004613524565b600b6020526000908152604090205481565b348015610afa57600080fd5b5061044b610b09366004613524565b61294e565b348015610b1a57600080fd5b50600d546103bc906301000000900460ff1681565b60006001600160e01b031982166380ac58cd60e01b1480610b6057506001600160e01b03198216635b5e139f60e01b145b80610b7b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060028054610b9090613996565b80601f0160208091040260200160405190810160405280929190818152602001828054610bbc90613996565b8015610c095780601f10610bde57610100808354040283529160200191610c09565b820191906000526020600020905b815481529060010190602001808311610bec57829003601f168201915b5050505050905090565b6000610c1e82612a04565b610c3b576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610c628261193f565b9050806001600160a01b0316836001600160a01b03161415610c975760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614801590610cb75750610cb58133610a73565b155b15610cd5576040516367d9dca160e11b815260040160405180910390fd5b610ce0838383612a2f565b505050565b6008546001600160a01b03163314610d325760405162461bcd60e51b81526020600482018190526024820152600080516020613a5983398151915260448201526064015b60405180910390fd5b600f5481610d436001546000540390565b610d4d9190613908565b1115610db15760405162461bcd60e51b815260206004820152602d60248201527f546f6f206d616e79206d696e74656420746f207075626c696320746f2070657260448201526c199bdc9b4819195d881b5a5b9d609a1b6064820152608401610d29565b610ddb7f0000000000000000000000000000000000000000000000000000000000000000826139ec565b15610e4e5760405162461bcd60e51b815260206004820152603660248201527f4d757374206f6e6c79206d696e742061206d756c7469706c65206f662074686560448201527f206d6178696d756d2061646472657373206d696e7473000000000000000000006064820152608401610d29565b6000610e7a7f000000000000000000000000000000000000000000000000000000000000000083613920565b905060005b81811015610ce057610eb1337f0000000000000000000000000000000000000000000000000000000000000000612a8b565b80610ebb816139d1565b915050610e7f565b610ce0838383612aa9565b6008546001600160a01b03163314610f165760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b601555565b60026009541415610f6e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d29565b6002600955600d546301000000900460ff16610fb75760405162461bcd60e51b81526020600482015260086024820152674e6f74204c69766560c01b6044820152606401610d29565b610ffd610fc43385612cbf565b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d0d92505050565b6110335760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b6044820152606401610d29565b336000908152600b60205260409020548314156110925760405162461bcd60e51b815260206004820152600f60248201527f416c726561647920636c61696d656400000000000000000000000000000000006044820152606401610d29565b60006110a16001546000540390565b600e549091506110b18583613908565b11156110ea5760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b6044820152606401610d29565b6110f43385612a8b565b336000908152600b602052604081208054869290611113908490613908565b9091555050604080518581523360208201527f6aa3eac93d079e5e100b1029be716caa33586c96aa4baac390669fb5c2a21212910160405180910390a1505060016009555050565b6008546001600160a01b031633146111a35760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600e5481106111f45760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f7420696e63726561736520737570706c79206f6620746f6b656e736044820152606401610d29565b600e55565b6008546001600160a01b031633146112415760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600260095414156112945760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d29565b6002600955476112e65760405162461bcd60e51b815260206004820152601660248201527f4e6f2062616c616e636520746f207769746864726177000000000000000000006044820152606401610d29565b4761131b734ee72eab8321fb265fd9fe6eefee14d0a1a1906c606461130c846013613934565b6113169190613920565b612d1c565b61134073022c875cda743a687a2669f5515408d7bc6af755606461130c846013613934565b61136573a3712a3c873e06026cbcbe14727bf6010f671738606461130c846013613934565b61138a7311b2e4ea2e759da33fb6f35bd4031f6e40046d26606461130c846014613934565b6113af735f208bd3ad1e6f67bd68833e04efc8263a51b467606461130c846005613934565b6113d473ceb5e5c55bb585cfaef92aeb1609c4384ec1890e606461130c846009613934565b6113f973ac839aae0afc40131fccaa1fce5c53e6b13aba8b606461130c846003613934565b61141e7329ae4c46dae9cb298a2398aab348769426900903606461130c846001613934565b6114437330e37464499deb7681030eccb33793e33e833402606461130c846001613934565b61146973927705920d0e697559718a16e283c458e75975f46103e861130c846005613934565b61148f735d8906c28a43bd2e99680b7552963d196602be846103e861130c846005613934565b6114b47355e29ada6fa377d75caab61e391aa5fc188960b2606461130c846001613934565b6114d9732b878dcb33490fe671adf704c6388abb569f4e18606461130c846001613934565b6114fe73fd43a900ac4380fd7e39775602b5ee2f341f8dfe606461130c846001613934565b506001600955565b610ce0838383604051806020016040528060008152506123b2565b6008546001600160a01b031633146115695760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b610ce06014838361346f565b600d54610100900460ff166115cc5760405162461bcd60e51b815260206004820152601b60248201527f53616c65206d7573742062652061637469766520746f206d696e7400000000006044820152606401610d29565b611642828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506016546040516bffffffffffffffffffffffff193360601b16602082015290925060340190505b60405160208183030381529060405280519060200120612dbf565b61169d5760405162461bcd60e51b815260206004820152602660248201527f496e76616c69642070726f6f66202d2043616c6c6572206e6f742077686974656044820152651b1a5cdd195960d21b6064820152608401610d29565b600083116116ed5760405162461bcd60e51b815260206004820152601d60248201527f53656e64657220697320747279696e6720746f206d696e74206e6f6e650000006044820152606401610d29565b7f0000000000000000000000000000000000000000000000000000000000000000836117183361275a565b6117229190613908565b111561178c5760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d29565b336000908152600a60205260409020547f0000000000000000000000000000000000000000000000000000000000000000906117c9908590613908565b111561183d5760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e74206d6f726520746860448201527f616e2074686569722077686974656c69737420616d6f756e74000000000000006064820152608401610d29565b600e548361184e6001546000540390565b6118589190613908565b11156118b45760405162461bcd60e51b815260206004820152602560248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f66206044820152646d696e747360d81b6064820152608401610d29565b6011546118c19084613934565b3410156119105760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206f66206574686572206973206e6f7420656e6f7567680000006044820152606401610d29565b336000908152600a60205260408120805485929061192f908490613908565b90915550610ce090503384612a8b565b600061194a82612dd5565b5192915050565b6008546001600160a01b031633146119995760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b6001600160a01b0382166000908152600c6020526040812080548392906119c1908490613908565b9091555050604080518281526001600160a01b03841660208201527f7871e154ac114554d9482c2356ea08c8934e9907ad45c33ca7c3677f2b157383910160405180910390a15050565b60006001600160a01b038216611a34576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b6008546001600160a01b03163314611aa25760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b611aac6000612ef1565b565b6008546001600160a01b03163314611af65760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b601655565b6008546001600160a01b03163314611b435760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600d805462ff0000198116620100009182900460ff1615909102179055565b6008546001600160a01b03163314611baa5760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b601255565b6040805160608101825260008082526020820181905291810191909152610b7b82612dd5565b606060038054610b9090613996565b6008546001600160a01b03163314611c2c5760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600d805460ff19811660ff90911615179055565b323314611c8f5760405162461bcd60e51b815260206004820152601e60248201527f5468652063616c6c657220697320616e6f7468657220636f6e747261637400006044820152606401610d29565b600d5462010000900460ff16611ce75760405162461bcd60e51b815260206004820152601b60248201527f53616c65206d7573742062652061637469766520746f206d696e7400000000006044820152606401610d29565b60008111611d375760405162461bcd60e51b815260206004820152601d60248201527f53656e64657220697320747279696e6720746f206d696e74206e6f6e650000006044820152606401610d29565b7f0000000000000000000000000000000000000000000000000000000000000000811115611dcd5760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e7420746f6f206d616e60448201527f7920696e20612073696e676c65207472616e73616374696f6e000000000000006064820152608401610d29565b7f000000000000000000000000000000000000000000000000000000000000000081611df83361275a565b611e029190613908565b1115611e6c5760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d29565b600e5481611e7d6001546000540390565b611e879190613908565b1115611ee35760405162461bcd60e51b815260206004820152602560248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f66206044820152646d696e747360d81b6064820152608401610d29565b601254611ef09082613934565b341015611f3f5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206f66206574686572206973206e6f7420656e6f7567680000006044820152606401610d29565b611f493382612a8b565b50565b6001600160a01b038216331415611f765760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600d5460ff166120345760405162461bcd60e51b815260206004820152601e60248201527f50726573616c65206d7573742062652061637469766520746f206d696e7400006044820152606401610d29565b612093828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506015546040516bffffffffffffffffffffffff193360601b1660208201529092506034019050611627565b6120ee5760405162461bcd60e51b815260206004820152602660248201527f496e76616c69642070726f6f66202d2043616c6c6572206e6f742077686974656044820152651b1a5cdd195960d21b6064820152608401610d29565b6000831161213e5760405162461bcd60e51b815260206004820152601d60248201527f53656e64657220697320747279696e6720746f206d696e74206e6f6e650000006044820152606401610d29565b7f0000000000000000000000000000000000000000000000000000000000000000836121693361275a565b6121739190613908565b11156121dd5760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d29565b336000908152600a60205260409020547f00000000000000000000000000000000000000000000000000000000000000009061221a908590613908565b111561228e5760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e74206d6f726520746860448201527f616e2074686569722077686974656c69737420616d6f756e74000000000000006064820152608401610d29565b600e548361229f6001546000540390565b6122a99190613908565b11156123095760405162461bcd60e51b815260206004820152602960248201527f5468697320776f756c642065786365656420746865206d6178206e756d626572604482015268206f66206d696e747360b81b6064820152608401610d29565b6010546123169084613934565b3410156119105760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820657468657220746f206d696e7400000000000000006044820152606401610d29565b6008546001600160a01b031633146123ad5760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b601755565b6123bd848484612aa9565b6001600160a01b0383163b151580156123df57506123dd84848484612f43565b155b156123fd576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061240e82612a04565b61242b57604051630a14c4b560e41b815260040160405180910390fd5b600061243561303b565b90508051600014156124565760405180602001604052806000815250612481565b806124608461304a565b604051602001612471929190613846565b6040516020818303038152906040525b9392505050565b6008546001600160a01b031633146124d05760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600d805460ff6301000000808304821615810263ff0000001990931692909217928390556040517fae946fdec58f87284b0bba64e6d052746da4c3de85ad8c080b9e03d7f7497a5e9361252c9390049091161515815260200190565b60405180910390a1565b6008546001600160a01b031633146111f45760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b6008546001600160a01b031633146125c65760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600d805461ff001981166101009182900460ff1615909102179055565b606060006125f46001546000540390565b905060008167ffffffffffffffff81111561261f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612648578160200160208202803683370190505b5090506000805b838110156126cf57600061266282612dd5565b9050866001600160a01b031681600001516001600160a01b031614156126bc57818484815181106126a357634e487b7160e01b600052603260045260246000fd5b6020908102919091010152826126b8816139d1565b9350505b50806126c7816139d1565b91505061264f565b5090949350505050565b6008546001600160a01b031633146127215760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b6008546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015611f49573d6000803e3d6000fd5b6000610b7b8261317c565b600260095414156127b85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d29565b6002600955336000908152600c602052604090205481111561281c5760405162461bcd60e51b815260206004820152601660248201527f457863656564732061697264726f7020616d6f756e74000000000000000000006044820152606401610d29565b600061282b6001546000540390565b600e5490915061283b8383613908565b11156128745760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b6044820152606401610d29565b336000908152600c602052604081208054849290612893908490613953565b909155506128a390503383612a8b565b604080518381523360208201527ff0dfaa24f01eff9e095950c354fc0a6b1c7bdfb060aad46746915324d5295218910160405180910390a150506001600955565b6008546001600160a01b0316331461292c5760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b031633146129965760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b6001600160a01b0381166129fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d29565b611f4981612ef1565b6000805482108015610b7b575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b612aa58282604051806020016040528060008152506131d7565b5050565b6000612ab482612dd5565b80519091506000906001600160a01b0316336001600160a01b03161480612ae257508151612ae29033610a73565b80612afd575033612af284610c13565b6001600160a01b0316145b905080612b1d57604051632ce44b5f60e11b815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614612b525760405162a1148160e81b815260040160405180910390fd5b6001600160a01b038416612b7957604051633a954ecd60e21b815260040160405180910390fd5b612b896000848460000151612a2f565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217909255908601808352912054909116612c7557600054811015612c75578251600082815260046020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b60008183604051602001612cef92919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120905092915050565b60006124818260175485612dbf565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612d69576040519150601f19603f3d011682016040523d82523d6000602084013e612d6e565b606091505b5050905080610ce05760405162461bcd60e51b815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152606401610d29565b600082612dcc85846131e4565b14949350505050565b604080516060810182526000808252602082018190529181019190915281600054811015612ed857600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290612ed65780516001600160a01b031615612e6c579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215612ed1579392505050565b612e6c565b505b604051636f96cda160e11b815260040160405180910390fd5b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290612f78903390899088908890600401613875565b602060405180830381600087803b158015612f9257600080fd5b505af1925050508015612fc2575060408051601f3d908101601f19168201909252612fbf91810190613717565b60015b61301d573d808015612ff0576040519150601f19603f3d011682016040523d82523d6000602084013e612ff5565b606091505b508051613015576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606060148054610b9090613996565b60608161306e5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156130985780613082816139d1565b91506130919050600a83613920565b9150613072565b60008167ffffffffffffffff8111156130c157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156130eb576020820181803683370190505b5090505b841561303357613100600183613953565b915061310d600a866139ec565b613118906030613908565b60f81b81838151811061313b57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613175600a86613920565b94506130ef565b60006001600160a01b0382166131a5576040516335ebb31960e01b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205468010000000000000000900467ffffffffffffffff1690565b610ce0838383600161329e565b600081815b845181101561329657600085828151811061321457634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311613256576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250613283565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061328e816139d1565b9150506131e9565b509392505050565b6000546001600160a01b0385166132c757604051622e076360e81b815260040160405180910390fd5b836132e55760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff19811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b42909216919091021790558080850183801561339757506001600160a01b0387163b15155b15613420575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46133e86000888480600101955088612f43565b613405576040516368d2bf6b60e11b815260040160405180910390fd5b8082141561339d57826000541461341b57600080fd5b613466565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821415613421575b50600055612cb8565b82805461347b90613996565b90600052602060002090601f01602090048101928261349d57600085556134e3565b82601f106134b65782800160ff198235161785556134e3565b828001600101855582156134e3579182015b828111156134e35782358255916020019190600101906134c8565b506134ef9291506134f3565b5090565b5b808211156134ef57600081556001016134f4565b80356001600160a01b038116811461351f57600080fd5b919050565b600060208284031215613535578081fd5b61248182613508565b60008060408385031215613550578081fd5b61355983613508565b915061356760208401613508565b90509250929050565b600080600060608486031215613584578081fd5b61358d84613508565b925061359b60208501613508565b9150604084013590509250925092565b600080600080608085870312156135c0578081fd5b6135c985613508565b93506135d760208601613508565b925060408501359150606085013567ffffffffffffffff808211156135fa578283fd5b818701915087601f83011261360d578283fd5b81358181111561361f5761361f613a2c565b604051601f8201601f19908116603f0116810190838211818310171561364757613647613a2c565b816040528281528a602084870101111561365f578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215613692578182fd5b61369b83613508565b9150602083013580151581146136af578182fd5b809150509250929050565b600080604083850312156136cc578182fd5b6136d583613508565b946020939093013593505050565b6000602082840312156136f4578081fd5b5035919050565b60006020828403121561370c578081fd5b813561248181613a42565b600060208284031215613728578081fd5b815161248181613a42565b60008060208385031215613745578182fd5b823567ffffffffffffffff8082111561375c578384fd5b818501915085601f83011261376f578384fd5b81358181111561377d578485fd5b86602082850101111561378e578485fd5b60209290920196919550909350505050565b6000806000604084860312156137b4578283fd5b83359250602084013567ffffffffffffffff808211156137d2578384fd5b818601915086601f8301126137e5578384fd5b8135818111156137f3578485fd5b8760208260051b8501011115613807578485fd5b6020830194508093505050509250925092565b6000815180845261383281602086016020860161396a565b601f01601f19169290920160200192915050565b6000835161385881846020880161396a565b83519083019061386c81836020880161396a565b01949350505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526138a7608083018461381a565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156138e9578351835292840192918401916001016138cd565b50909695505050505050565b602081526000612481602083018461381a565b6000821982111561391b5761391b613a00565b500190565b60008261392f5761392f613a16565b500490565b600081600019048311821515161561394e5761394e613a00565b500290565b60008282101561396557613965613a00565b500390565b60005b8381101561398557818101518382015260200161396d565b838111156123fd5750506000910152565b600181811c908216806139aa57607f821691505b602082108114156139cb57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156139e5576139e5613a00565b5060010190565b6000826139fb576139fb613a16565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611f4957600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212209d5ef0f0883c8c384d348fe1caa1121286c9d1bdb0679aa2ab79be21707be1b464736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106103975760003560e01c80638da5cb5b116101dc578063cd5d4a9011610102578063e30d4440116100a0578063ef5d9ae81161006f578063ef5d9ae814610ac1578063f2fde38b14610aee578063f4a0a528146107aa578063fa53cd3814610b0e57600080fd5b8063e30d444014610a2f578063e397950814610a42578063e985e9c514610a58578063ee46699614610aa157600080fd5b8063d5abeb01116100dc578063d5abeb01146109b7578063da87741b146109cd578063db2e21bc146109fa578063dc33e68114610a0f57600080fd5b8063cd5d4a901461096d578063d44e357314610982578063d57f8279146109a257600080fd5b8063a22cb4651161017a578063b88d4fde11610149578063b88d4fde146108dd578063c4fc4246146108fd578063c556da8e14610917578063c87b56dd1461094d57600080fd5b8063a22cb46514610874578063a3a53ccb14610894578063ae269743146108a7578063aea48328146108c757600080fd5b806395d89b41116101b657806395d89b41146108215780639980018514610836578063a035b1fe1461084b578063a0712d681461086157600080fd5b80638da5cb5b1461078c57806391b7f5ed146107aa5780639231ab2a146107ca57600080fd5b806343d0d356116102c157806363665f2e1161025f5780637d44fd111161022e5780637d44fd111461072b5780637d8966e41461074b57806383df8d8d146107605780638babe7661461077657600080fd5b806363665f2e146106b657806368428a1b146106d657806370a08231146106f6578063715018a61461071657600080fd5b806358cf77fa1161029b57806358cf77fa146106225780635d579a091461064f57806363055127146106625780636352211e1461069657600080fd5b806343d0d356146105bf57806344d19d2b146105ec57806355f804b31461060257600080fd5b806318f34b0f116103395780632f52ebb7116103085780632f52ebb7146105575780633b4c4b251461056a5780633ccfd60b1461058a57806342842e0e1461059f57600080fd5b806318f34b0f146104af578063207e2173146104e357806323b872dd1461051757806325c2c0201461053757600080fd5b8063095ea7b311610375578063095ea7b31461042b5780631342ff4c1461044d578063142109ed1461046d57806318160ddd1461048c57600080fd5b806301ffc9a71461039c57806306fdde03146103d1578063081812fc146103f3575b600080fd5b3480156103a857600080fd5b506103bc6103b73660046136fb565b610b2f565b60405190151581526020015b60405180910390f35b3480156103dd57600080fd5b506103e6610b81565b6040516103c891906138f5565b3480156103ff57600080fd5b5061041361040e3660046136e3565b610c13565b6040516001600160a01b0390911681526020016103c8565b34801561043757600080fd5b5061044b6104463660046136ba565b610c57565b005b34801561045957600080fd5b5061044b6104683660046136e3565b610ce5565b34801561047957600080fd5b50600d546103bc90610100900460ff1681565b34801561049857600080fd5b50600154600054035b6040519081526020016103c8565b3480156104bb57600080fd5b506104a17f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ef57600080fd5b506104a17f000000000000000000000000000000000000000000000000000000000000000081565b34801561052357600080fd5b5061044b610532366004613570565b610ec3565b34801561054357600080fd5b5061044b6105523660046136e3565b610ece565b61044b6105653660046137a0565b610f1b565b34801561057657600080fd5b5061044b6105853660046136e3565b61115b565b34801561059657600080fd5b5061044b6111f9565b3480156105ab57600080fd5b5061044b6105ba366004613570565b611506565b3480156105cb57600080fd5b506104a16105da366004613524565b600a6020526000908152604090205481565b3480156105f857600080fd5b506104a1600f5481565b34801561060e57600080fd5b5061044b61061d366004613733565b611521565b34801561062e57600080fd5b506104a161063d366004613524565b600c6020526000908152604090205481565b61044b61065d3660046137a0565b611575565b34801561066e57600080fd5b506104a17f000000000000000000000000000000000000000000000000000000000000000081565b3480156106a257600080fd5b506104136106b13660046136e3565b61193f565b3480156106c257600080fd5b5061044b6106d13660046136ba565b611951565b3480156106e257600080fd5b50600d546103bc9062010000900460ff1681565b34801561070257600080fd5b506104a1610711366004613524565b611a0b565b34801561072257600080fd5b5061044b611a5a565b34801561073757600080fd5b5061044b6107463660046136e3565b611aae565b34801561075757600080fd5b5061044b611afb565b34801561076c57600080fd5b506104a160155481565b34801561078257600080fd5b506104a160105481565b34801561079857600080fd5b506008546001600160a01b0316610413565b3480156107b657600080fd5b5061044b6107c53660046136e3565b611b62565b3480156107d657600080fd5b506107ea6107e53660046136e3565b611baf565b6040805182516001600160a01b0316815260208084015167ffffffffffffffff1690820152918101511515908201526060016103c8565b34801561082d57600080fd5b506103e6611bd5565b34801561084257600080fd5b5061044b611be4565b34801561085757600080fd5b506104a160125481565b61044b61086f3660046136e3565b611c40565b34801561088057600080fd5b5061044b61088f366004613680565b611f4c565b61044b6108a23660046137a0565b611fe2565b3480156108b357600080fd5b5061044b6108c23660046136e3565b612365565b3480156108d357600080fd5b506104a160165481565b3480156108e957600080fd5b5061044b6108f83660046135ab565b6123b2565b34801561090957600080fd5b50600d546103bc9060ff1681565b34801561092357600080fd5b506104a1610932366004613524565b6001600160a01b03166000908152600b602052604090205490565b34801561095957600080fd5b506103e66109683660046136e3565b612403565b34801561097957600080fd5b5061044b612488565b34801561098e57600080fd5b5061044b61099d3660046136e3565b612536565b3480156109ae57600080fd5b5061044b61257e565b3480156109c357600080fd5b506104a1600e5481565b3480156109d957600080fd5b506109ed6109e8366004613524565b6125e3565b6040516103c891906138b1565b348015610a0657600080fd5b5061044b6126d9565b348015610a1b57600080fd5b506104a1610a2a366004613524565b61275a565b61044b610a3d3660046136e3565b612765565b348015610a4e57600080fd5b506104a160115481565b348015610a6457600080fd5b506103bc610a7336600461353e565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b348015610aad57600080fd5b5061044b610abc366004613524565b6128e4565b348015610acd57600080fd5b506104a1610adc366004613524565b600b6020526000908152604090205481565b348015610afa57600080fd5b5061044b610b09366004613524565b61294e565b348015610b1a57600080fd5b50600d546103bc906301000000900460ff1681565b60006001600160e01b031982166380ac58cd60e01b1480610b6057506001600160e01b03198216635b5e139f60e01b145b80610b7b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060028054610b9090613996565b80601f0160208091040260200160405190810160405280929190818152602001828054610bbc90613996565b8015610c095780601f10610bde57610100808354040283529160200191610c09565b820191906000526020600020905b815481529060010190602001808311610bec57829003601f168201915b5050505050905090565b6000610c1e82612a04565b610c3b576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610c628261193f565b9050806001600160a01b0316836001600160a01b03161415610c975760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614801590610cb75750610cb58133610a73565b155b15610cd5576040516367d9dca160e11b815260040160405180910390fd5b610ce0838383612a2f565b505050565b6008546001600160a01b03163314610d325760405162461bcd60e51b81526020600482018190526024820152600080516020613a5983398151915260448201526064015b60405180910390fd5b600f5481610d436001546000540390565b610d4d9190613908565b1115610db15760405162461bcd60e51b815260206004820152602d60248201527f546f6f206d616e79206d696e74656420746f207075626c696320746f2070657260448201526c199bdc9b4819195d881b5a5b9d609a1b6064820152608401610d29565b610ddb7f0000000000000000000000000000000000000000000000000000000000000000826139ec565b15610e4e5760405162461bcd60e51b815260206004820152603660248201527f4d757374206f6e6c79206d696e742061206d756c7469706c65206f662074686560448201527f206d6178696d756d2061646472657373206d696e7473000000000000000000006064820152608401610d29565b6000610e7a7f000000000000000000000000000000000000000000000000000000000000000083613920565b905060005b81811015610ce057610eb1337f0000000000000000000000000000000000000000000000000000000000000000612a8b565b80610ebb816139d1565b915050610e7f565b610ce0838383612aa9565b6008546001600160a01b03163314610f165760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b601555565b60026009541415610f6e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d29565b6002600955600d546301000000900460ff16610fb75760405162461bcd60e51b81526020600482015260086024820152674e6f74204c69766560c01b6044820152606401610d29565b610ffd610fc43385612cbf565b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d0d92505050565b6110335760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b6044820152606401610d29565b336000908152600b60205260409020548314156110925760405162461bcd60e51b815260206004820152600f60248201527f416c726561647920636c61696d656400000000000000000000000000000000006044820152606401610d29565b60006110a16001546000540390565b600e549091506110b18583613908565b11156110ea5760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b6044820152606401610d29565b6110f43385612a8b565b336000908152600b602052604081208054869290611113908490613908565b9091555050604080518581523360208201527f6aa3eac93d079e5e100b1029be716caa33586c96aa4baac390669fb5c2a21212910160405180910390a1505060016009555050565b6008546001600160a01b031633146111a35760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600e5481106111f45760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f7420696e63726561736520737570706c79206f6620746f6b656e736044820152606401610d29565b600e55565b6008546001600160a01b031633146112415760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600260095414156112945760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d29565b6002600955476112e65760405162461bcd60e51b815260206004820152601660248201527f4e6f2062616c616e636520746f207769746864726177000000000000000000006044820152606401610d29565b4761131b734ee72eab8321fb265fd9fe6eefee14d0a1a1906c606461130c846013613934565b6113169190613920565b612d1c565b61134073022c875cda743a687a2669f5515408d7bc6af755606461130c846013613934565b61136573a3712a3c873e06026cbcbe14727bf6010f671738606461130c846013613934565b61138a7311b2e4ea2e759da33fb6f35bd4031f6e40046d26606461130c846014613934565b6113af735f208bd3ad1e6f67bd68833e04efc8263a51b467606461130c846005613934565b6113d473ceb5e5c55bb585cfaef92aeb1609c4384ec1890e606461130c846009613934565b6113f973ac839aae0afc40131fccaa1fce5c53e6b13aba8b606461130c846003613934565b61141e7329ae4c46dae9cb298a2398aab348769426900903606461130c846001613934565b6114437330e37464499deb7681030eccb33793e33e833402606461130c846001613934565b61146973927705920d0e697559718a16e283c458e75975f46103e861130c846005613934565b61148f735d8906c28a43bd2e99680b7552963d196602be846103e861130c846005613934565b6114b47355e29ada6fa377d75caab61e391aa5fc188960b2606461130c846001613934565b6114d9732b878dcb33490fe671adf704c6388abb569f4e18606461130c846001613934565b6114fe73fd43a900ac4380fd7e39775602b5ee2f341f8dfe606461130c846001613934565b506001600955565b610ce0838383604051806020016040528060008152506123b2565b6008546001600160a01b031633146115695760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b610ce06014838361346f565b600d54610100900460ff166115cc5760405162461bcd60e51b815260206004820152601b60248201527f53616c65206d7573742062652061637469766520746f206d696e7400000000006044820152606401610d29565b611642828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506016546040516bffffffffffffffffffffffff193360601b16602082015290925060340190505b60405160208183030381529060405280519060200120612dbf565b61169d5760405162461bcd60e51b815260206004820152602660248201527f496e76616c69642070726f6f66202d2043616c6c6572206e6f742077686974656044820152651b1a5cdd195960d21b6064820152608401610d29565b600083116116ed5760405162461bcd60e51b815260206004820152601d60248201527f53656e64657220697320747279696e6720746f206d696e74206e6f6e650000006044820152606401610d29565b7f0000000000000000000000000000000000000000000000000000000000000000836117183361275a565b6117229190613908565b111561178c5760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d29565b336000908152600a60205260409020547f0000000000000000000000000000000000000000000000000000000000000000906117c9908590613908565b111561183d5760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e74206d6f726520746860448201527f616e2074686569722077686974656c69737420616d6f756e74000000000000006064820152608401610d29565b600e548361184e6001546000540390565b6118589190613908565b11156118b45760405162461bcd60e51b815260206004820152602560248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f66206044820152646d696e747360d81b6064820152608401610d29565b6011546118c19084613934565b3410156119105760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206f66206574686572206973206e6f7420656e6f7567680000006044820152606401610d29565b336000908152600a60205260408120805485929061192f908490613908565b90915550610ce090503384612a8b565b600061194a82612dd5565b5192915050565b6008546001600160a01b031633146119995760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b6001600160a01b0382166000908152600c6020526040812080548392906119c1908490613908565b9091555050604080518281526001600160a01b03841660208201527f7871e154ac114554d9482c2356ea08c8934e9907ad45c33ca7c3677f2b157383910160405180910390a15050565b60006001600160a01b038216611a34576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b6008546001600160a01b03163314611aa25760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b611aac6000612ef1565b565b6008546001600160a01b03163314611af65760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b601655565b6008546001600160a01b03163314611b435760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600d805462ff0000198116620100009182900460ff1615909102179055565b6008546001600160a01b03163314611baa5760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b601255565b6040805160608101825260008082526020820181905291810191909152610b7b82612dd5565b606060038054610b9090613996565b6008546001600160a01b03163314611c2c5760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600d805460ff19811660ff90911615179055565b323314611c8f5760405162461bcd60e51b815260206004820152601e60248201527f5468652063616c6c657220697320616e6f7468657220636f6e747261637400006044820152606401610d29565b600d5462010000900460ff16611ce75760405162461bcd60e51b815260206004820152601b60248201527f53616c65206d7573742062652061637469766520746f206d696e7400000000006044820152606401610d29565b60008111611d375760405162461bcd60e51b815260206004820152601d60248201527f53656e64657220697320747279696e6720746f206d696e74206e6f6e650000006044820152606401610d29565b7f0000000000000000000000000000000000000000000000000000000000000000811115611dcd5760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e7420746f6f206d616e60448201527f7920696e20612073696e676c65207472616e73616374696f6e000000000000006064820152608401610d29565b7f000000000000000000000000000000000000000000000000000000000000000081611df83361275a565b611e029190613908565b1115611e6c5760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d29565b600e5481611e7d6001546000540390565b611e879190613908565b1115611ee35760405162461bcd60e51b815260206004820152602560248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f66206044820152646d696e747360d81b6064820152608401610d29565b601254611ef09082613934565b341015611f3f5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206f66206574686572206973206e6f7420656e6f7567680000006044820152606401610d29565b611f493382612a8b565b50565b6001600160a01b038216331415611f765760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600d5460ff166120345760405162461bcd60e51b815260206004820152601e60248201527f50726573616c65206d7573742062652061637469766520746f206d696e7400006044820152606401610d29565b612093828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506015546040516bffffffffffffffffffffffff193360601b1660208201529092506034019050611627565b6120ee5760405162461bcd60e51b815260206004820152602660248201527f496e76616c69642070726f6f66202d2043616c6c6572206e6f742077686974656044820152651b1a5cdd195960d21b6064820152608401610d29565b6000831161213e5760405162461bcd60e51b815260206004820152601d60248201527f53656e64657220697320747279696e6720746f206d696e74206e6f6e650000006044820152606401610d29565b7f0000000000000000000000000000000000000000000000000000000000000000836121693361275a565b6121739190613908565b11156121dd5760405162461bcd60e51b815260206004820152603360248201527f53656e64657220697320747279696e6720746f206d696e74206d6f7265207468604482015272616e20616c6c6f636174656420746f6b656e7360681b6064820152608401610d29565b336000908152600a60205260409020547f00000000000000000000000000000000000000000000000000000000000000009061221a908590613908565b111561228e5760405162461bcd60e51b815260206004820152603960248201527f53656e64657220697320747279696e6720746f206d696e74206d6f726520746860448201527f616e2074686569722077686974656c69737420616d6f756e74000000000000006064820152608401610d29565b600e548361229f6001546000540390565b6122a99190613908565b11156123095760405162461bcd60e51b815260206004820152602960248201527f5468697320776f756c642065786365656420746865206d6178206e756d626572604482015268206f66206d696e747360b81b6064820152608401610d29565b6010546123169084613934565b3410156119105760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820657468657220746f206d696e7400000000000000006044820152606401610d29565b6008546001600160a01b031633146123ad5760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b601755565b6123bd848484612aa9565b6001600160a01b0383163b151580156123df57506123dd84848484612f43565b155b156123fd576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061240e82612a04565b61242b57604051630a14c4b560e41b815260040160405180910390fd5b600061243561303b565b90508051600014156124565760405180602001604052806000815250612481565b806124608461304a565b604051602001612471929190613846565b6040516020818303038152906040525b9392505050565b6008546001600160a01b031633146124d05760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600d805460ff6301000000808304821615810263ff0000001990931692909217928390556040517fae946fdec58f87284b0bba64e6d052746da4c3de85ad8c080b9e03d7f7497a5e9361252c9390049091161515815260200190565b60405180910390a1565b6008546001600160a01b031633146111f45760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b6008546001600160a01b031633146125c65760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b600d805461ff001981166101009182900460ff1615909102179055565b606060006125f46001546000540390565b905060008167ffffffffffffffff81111561261f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612648578160200160208202803683370190505b5090506000805b838110156126cf57600061266282612dd5565b9050866001600160a01b031681600001516001600160a01b031614156126bc57818484815181106126a357634e487b7160e01b600052603260045260246000fd5b6020908102919091010152826126b8816139d1565b9350505b50806126c7816139d1565b91505061264f565b5090949350505050565b6008546001600160a01b031633146127215760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b6008546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015611f49573d6000803e3d6000fd5b6000610b7b8261317c565b600260095414156127b85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d29565b6002600955336000908152600c602052604090205481111561281c5760405162461bcd60e51b815260206004820152601660248201527f457863656564732061697264726f7020616d6f756e74000000000000000000006044820152606401610d29565b600061282b6001546000540390565b600e5490915061283b8383613908565b11156128745760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b6044820152606401610d29565b336000908152600c602052604081208054849290612893908490613953565b909155506128a390503383612a8b565b604080518381523360208201527ff0dfaa24f01eff9e095950c354fc0a6b1c7bdfb060aad46746915324d5295218910160405180910390a150506001600955565b6008546001600160a01b0316331461292c5760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b031633146129965760405162461bcd60e51b81526020600482018190526024820152600080516020613a598339815191526044820152606401610d29565b6001600160a01b0381166129fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d29565b611f4981612ef1565b6000805482108015610b7b575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b612aa58282604051806020016040528060008152506131d7565b5050565b6000612ab482612dd5565b80519091506000906001600160a01b0316336001600160a01b03161480612ae257508151612ae29033610a73565b80612afd575033612af284610c13565b6001600160a01b0316145b905080612b1d57604051632ce44b5f60e11b815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614612b525760405162a1148160e81b815260040160405180910390fd5b6001600160a01b038416612b7957604051633a954ecd60e21b815260040160405180910390fd5b612b896000848460000151612a2f565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217909255908601808352912054909116612c7557600054811015612c75578251600082815260046020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b60008183604051602001612cef92919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120905092915050565b60006124818260175485612dbf565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612d69576040519150601f19603f3d011682016040523d82523d6000602084013e612d6e565b606091505b5050905080610ce05760405162461bcd60e51b815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152606401610d29565b600082612dcc85846131e4565b14949350505050565b604080516060810182526000808252602082018190529181019190915281600054811015612ed857600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290612ed65780516001600160a01b031615612e6c579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215612ed1579392505050565b612e6c565b505b604051636f96cda160e11b815260040160405180910390fd5b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290612f78903390899088908890600401613875565b602060405180830381600087803b158015612f9257600080fd5b505af1925050508015612fc2575060408051601f3d908101601f19168201909252612fbf91810190613717565b60015b61301d573d808015612ff0576040519150601f19603f3d011682016040523d82523d6000602084013e612ff5565b606091505b508051613015576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606060148054610b9090613996565b60608161306e5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156130985780613082816139d1565b91506130919050600a83613920565b9150613072565b60008167ffffffffffffffff8111156130c157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156130eb576020820181803683370190505b5090505b841561303357613100600183613953565b915061310d600a866139ec565b613118906030613908565b60f81b81838151811061313b57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613175600a86613920565b94506130ef565b60006001600160a01b0382166131a5576040516335ebb31960e01b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205468010000000000000000900467ffffffffffffffff1690565b610ce0838383600161329e565b600081815b845181101561329657600085828151811061321457634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311613256576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250613283565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061328e816139d1565b9150506131e9565b509392505050565b6000546001600160a01b0385166132c757604051622e076360e81b815260040160405180910390fd5b836132e55760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff19811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b42909216919091021790558080850183801561339757506001600160a01b0387163b15155b15613420575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46133e86000888480600101955088612f43565b613405576040516368d2bf6b60e11b815260040160405180910390fd5b8082141561339d57826000541461341b57600080fd5b613466565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821415613421575b50600055612cb8565b82805461347b90613996565b90600052602060002090601f01602090048101928261349d57600085556134e3565b82601f106134b65782800160ff198235161785556134e3565b828001600101855582156134e3579182015b828111156134e35782358255916020019190600101906134c8565b506134ef9291506134f3565b5090565b5b808211156134ef57600081556001016134f4565b80356001600160a01b038116811461351f57600080fd5b919050565b600060208284031215613535578081fd5b61248182613508565b60008060408385031215613550578081fd5b61355983613508565b915061356760208401613508565b90509250929050565b600080600060608486031215613584578081fd5b61358d84613508565b925061359b60208501613508565b9150604084013590509250925092565b600080600080608085870312156135c0578081fd5b6135c985613508565b93506135d760208601613508565b925060408501359150606085013567ffffffffffffffff808211156135fa578283fd5b818701915087601f83011261360d578283fd5b81358181111561361f5761361f613a2c565b604051601f8201601f19908116603f0116810190838211818310171561364757613647613a2c565b816040528281528a602084870101111561365f578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215613692578182fd5b61369b83613508565b9150602083013580151581146136af578182fd5b809150509250929050565b600080604083850312156136cc578182fd5b6136d583613508565b946020939093013593505050565b6000602082840312156136f4578081fd5b5035919050565b60006020828403121561370c578081fd5b813561248181613a42565b600060208284031215613728578081fd5b815161248181613a42565b60008060208385031215613745578182fd5b823567ffffffffffffffff8082111561375c578384fd5b818501915085601f83011261376f578384fd5b81358181111561377d578485fd5b86602082850101111561378e578485fd5b60209290920196919550909350505050565b6000806000604084860312156137b4578283fd5b83359250602084013567ffffffffffffffff808211156137d2578384fd5b818601915086601f8301126137e5578384fd5b8135818111156137f3578485fd5b8760208260051b8501011115613807578485fd5b6020830194508093505050509250925092565b6000815180845261383281602086016020860161396a565b601f01601f19169290920160200192915050565b6000835161385881846020880161396a565b83519083019061386c81836020880161396a565b01949350505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526138a7608083018461381a565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156138e9578351835292840192918401916001016138cd565b50909695505050505050565b602081526000612481602083018461381a565b6000821982111561391b5761391b613a00565b500190565b60008261392f5761392f613a16565b500490565b600081600019048311821515161561394e5761394e613a00565b500290565b60008282101561396557613965613a00565b500390565b60005b8381101561398557818101518382015260200161396d565b838111156123fd5750506000910152565b600181811c908216806139aa57607f821691505b602082108114156139cb57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156139e5576139e5613a00565b5060010190565b6000826139fb576139fb613a16565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611f4957600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212209d5ef0f0883c8c384d348fe1caa1121286c9d1bdb0679aa2ab79be21707be1b464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}.Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mint(uint256)": {
        "notice": "Public mint"
      },
      "mintOGSale(uint256,bytes32[])": {
        "notice": "OG mint"
      },
      "mintWLSale(uint256,bytes32[])": {
        "notice": "Whitelist mint"
      },
      "reserveMint(uint256)": {
        "notice": "Reserve mint for founders"
      }
    },
    "notice": ".+------+     +------+     +------+     +------+     +------+. .' |    .'|    /|     /|     |      |     |\\     |\\    |`.    | `. +---+--+'  |   +-+----+ |     +------+     | +----+-+   |  `+--+---+ |   |  |   |   | |    | |     |      |     | |    | |   |   |  |   | |  ,+--+---+   | +----+-+     +------+     +-+----+ |   +---+--+   | |.'    | .'    |/     |/      |      |      \\|     \\|    `. |   `. | +------+'      +------+       +------+       +------+      `+------+ .----------------.  .----------------.  .----------------.  .----------------.  | .--------------. || .--------------. || .--------------. || .--------------. | | |     _____    | || | _____  _____ | || |    _______   | || |  _________   | | | |    |_   _|   | || ||_   _||_   _|| || |   /  ___  |  | || | |  _   _  |  | | | |      | |     | || |  | |    | |  | || |  |  (__ \\_|  | || | |_/ | | \\_|  | | | |   _  | |     | || |  | '    ' |  | || |   '.___`-.   | || |     | |      | | | |  | |_' |     | || |   \\ `--' /   | || |  |`\\____) |  | || |    _| |_     | | | |  `.___.'     | || |    `.__.'    | || |  |_______.'  | || |   |_____|    | | | |              | || |              | || |              | || |              | | | '--------------' || '--------------' || '--------------' || '--------------' | '----------------'  '----------------'  '----------------'  '----------------'  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. | | |     ______   | || | _____  _____ | || |   ______     | || |  _________   | || |    _______   | | | |   .' ___  |  | || ||_   _||_   _|| || |  |_   _ \\    | || | |_   ___  |  | || |   /  ___  |  | | | |  / .'   \\_|  | || |  | |    | |  | || |    | |_) |   | || |   | |_  \\_|  | || |  |  (__ \\_|  | | | |  | |         | || |  | '    ' |  | || |    |  __'.   | || |   |  _|  _   | || |   '.___`-.   | | | |  \\ `.___.'\\  | || |   \\ `--' /   | || |   _| |__) |  | || |  _| |___/ |  | || |  |`\\____) |  | | | |   `._____.'  | || |    `.__.'    | || |  |_______/   | || | |_________|  | || |  |_______.'  | | | |              | || |              | || |              | || |              | || |              | | | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' | '----------------'  '----------------'  '----------------'  '----------------'  '----------------' ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1451,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1453,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1455,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1457,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1462,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_ownerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)1440_storage)"
      },
      {
        "astId": 1467,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_addressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressData)1449_storage)"
      },
      {
        "astId": 1471,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1477,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2709,
        "contract": "contracts/test.sol:JustCubes",
        "label": "numberOfWLMintsOnAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2713,
        "contract": "contracts/test.sol:JustCubes",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2717,
        "contract": "contracts/test.sol:JustCubes",
        "label": "airdropList",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2720,
        "contract": "contracts/test.sol:JustCubes",
        "label": "OGsaleActive",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2723,
        "contract": "contracts/test.sol:JustCubes",
        "label": "WLsaleActive",
        "offset": 1,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2726,
        "contract": "contracts/test.sol:JustCubes",
        "label": "saleActive",
        "offset": 2,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2729,
        "contract": "contracts/test.sol:JustCubes",
        "label": "isFreeClaimActive",
        "offset": 3,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2741,
        "contract": "contracts/test.sol:JustCubes",
        "label": "maxSupply",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2744,
        "contract": "contracts/test.sol:JustCubes",
        "label": "reservedSupply",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2747,
        "contract": "contracts/test.sol:JustCubes",
        "label": "OGprice",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2750,
        "contract": "contracts/test.sol:JustCubes",
        "label": "WLprice",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2753,
        "contract": "contracts/test.sol:JustCubes",
        "label": "price",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2756,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_signer",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 2759,
        "contract": "contracts/test.sol:JustCubes",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      },
      {
        "astId": 2761,
        "contract": "contracts/test.sol:JustCubes",
        "label": "OGMerkleRoot",
        "offset": 0,
        "slot": "21",
        "type": "t_bytes32"
      },
      {
        "astId": 2763,
        "contract": "contracts/test.sol:JustCubes",
        "label": "WLMerkleRoot",
        "offset": 0,
        "slot": "22",
        "type": "t_bytes32"
      },
      {
        "astId": 2765,
        "contract": "contracts/test.sol:JustCubes",
        "label": "freeClaim",
        "offset": 0,
        "slot": "23",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)1449_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)1449_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)1440_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)1440_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)1449_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 1442,
            "contract": "contracts/test.sol:JustCubes",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1444,
            "contract": "contracts/test.sol:JustCubes",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1446,
            "contract": "contracts/test.sol:JustCubes",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1448,
            "contract": "contracts/test.sol:JustCubes",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)1440_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 1435,
            "contract": "contracts/test.sol:JustCubes",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1437,
            "contract": "contracts/test.sol:JustCubes",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1439,
            "contract": "contracts/test.sol:JustCubes",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
